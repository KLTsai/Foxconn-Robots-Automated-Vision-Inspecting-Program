//
//  File generated by HDevelop for HALCON/DOTNET (C#) Version 11.0
//
//  This file is intended to be used with the HDevelopTemplate or
//  HDevelopTemplateWPF projects located under %HALCONEXAMPLES%\c#

using System;
using HalconDotNet;
using Tien_Function;


namespace PixeLinkU3
{
    public partial class PGU3_CCD_Acquisition
    {
        public HTuple hv_ExpDefaultWinHandle;
        private volatile bool m_Acquistion_Stop;  //// Volatile is used as hint to the compiler that this data member will be accessed by multiple threads.
        HObject ho_Image = null;
        private object locker = new Object(); // 用於獨佔鎖定的物件

        //public HObject Ho_Image
        //{
        //    get { return ho_Image; }
        //    set { ho_Image = value; }
        //}
        HTuple m_Window; // for Halcon window handle
        HTuple m_Exposure;
        HTuple m_FrameRate;
        HTuple m_Sharpness;
        HTuple m_Gamma;
        HTuple m_Gain;
        HTuple m_Hue;
        HTuple m_Saturation;
        HTuple m_TriggerOn;
        bool m_DisplayROI;
        ROI m_FocusROI;

        public ROI FocusROI
        {
            get { return m_FocusROI; }
            set { m_FocusROI = value; }
        }

        public bool DisplayROI
        {
            get { return m_DisplayROI; }
            set { m_DisplayROI = value; }
        }
        string m_CCD_Type;


        public string CCD_Type
        {
            get { return m_CCD_Type; }
            set { m_CCD_Type = value; }
        }

        public HTuple Sharpness
        {
            get { return m_Sharpness; }
            set { m_Sharpness = value; }
        }
        

        public HTuple Gamma
        {
            get { return m_Gamma; }
            set { m_Gamma = value; }
        }
        

        public HTuple Gain
        {
            get { return m_Gain; }
            set { m_Gain = value; }
        }
        
        public HTuple Hue
        {
            get { return m_Hue; }
            set { m_Hue = value; }
        }
        public HTuple Saturation
        {
            get { return m_Saturation; }
            set { m_Saturation = value; }
        }        

        public HTuple TriggerOn
        {
            get { return m_TriggerOn; }
            set { m_TriggerOn = value; }
        }

        public HTuple FrameRate
        {
            get { return m_FrameRate; }
            set { m_FrameRate = value; }
        }

        public HTuple Exposure
        {
            get { return m_Exposure; }
            set { m_Exposure = value; }
        }

        public HTuple Window
        {
            get { return m_Window; }
            set { m_Window = value; }
        }

        public bool Acquistion_Stop
        {
            get { return m_Acquistion_Stop; }
            set { m_Acquistion_Stop = value; }
        }       

        // Main procedure 
        


        private void action()
        {

            // Local iconic variables 
            


            // Local control variables 

            HTuple hv_AcqHandle = null;

            // Initialize local and output iconic variables 
            HOperatorSet.GenEmptyObj(out ho_Image);
            
            //Image Acquisition 01: Code generated by Image Acquisition 01
            //HOperatorSet.OpenFramegrabber("DirectShow", 1, 1, 0, 0, 0, 0, "default", 8, "rgb",
            //    -1, "false", "default", "[1] Point Grey Camera", 0, -1, out hv_AcqHandle);
            //Image Acquisition 01: Code generated by Image Acquisition 01
            //Image Acquisition 01: Attention: The initialization may fail in case parameters need to
            //Image Acquisition 01: be set in a specific order (e.g., image resolution vs. offset).
            HOperatorSet.OpenFramegrabber("DirectShow", 1, 1, 0, 0, 0, 0, "default", 8, "gray", -1, "false", "default",
                                          m_CCD_Type, 0, -1, out hv_AcqHandle); // "[0] PixeLINK USB3 Camera Release 4"
            HOperatorSet.SetFramegrabberParam(hv_AcqHandle, "frame_rate", 60.0006);
            //HOperatorSet.SetFramegrabberParam(hv_AcqHandle, "exposure", 3);  // value 只有 -5 到 +5
            //HOperatorSet.SetFramegrabberParam(hv_AcqHandle, "external_trigger", "false");
            HOperatorSet.GrabImageStart(hv_AcqHandle, -1);
            HOperatorSet.GrabImageStart(hv_AcqHandle, -1);
            hv_ExpDefaultWinHandle = Window;
            m_Acquistion_Stop = false;
            HTuple imageWidth, imageHeight;
            
         
                while (!m_Acquistion_Stop)
                {
                    lock (locker)
                    {
                        ho_Image.Dispose();

                        HOperatorSet.GrabImageAsync(out ho_Image, hv_AcqHandle, -1);
                        HOperatorSet.GetImageSize(ho_Image, out imageWidth, out imageHeight);

                        //Image Acquisition 01: Do something
                        if (hv_ExpDefaultWinHandle != null && ho_Image != null)  // 防止user 太快關閉視窗
                            HOperatorSet.DispObj(ho_Image, hv_ExpDefaultWinHandle);
                        if (m_DisplayROI)
                        {
                            HOperatorSet.DispRectangle1(hv_ExpDefaultWinHandle, FocusROI.StartY, FocusROI.StartX, FocusROI.StartY + FocusROI.Height, FocusROI.StartX + FocusROI.Width);
                        }
                    }

                }
            HOperatorSet.CloseFramegrabber(hv_AcqHandle);
            //ho_Image.Dispose();

        }

        public void InitHalcon()
        {
            // Default settings used in HDevelop 
            HOperatorSet.SetSystem("width", 512);
            HOperatorSet.SetSystem("height", 512);
        }
        public HObject Grab()
        {
            // Local iconic variables 

            HObject ho_Image_grab;


            // Local control variables 

            HTuple hv_AcqHandle = null;

            // Initialize local and output iconic variables 
            HOperatorSet.GenEmptyObj(out ho_Image);

            //Image Acquisition 01: Code generated by Image Acquisition 01
            //Image Acquisition 01: Attention: The initialization may fail in case parameters need to
            //Image Acquisition 01: be set in a specific order (e.g., image resolution vs. offset).
            HOperatorSet.OpenFramegrabber("DirectShow", 1, 1, 0, 0, 0, 0, "default", 8, "gray",
                -1, "false", "default", m_CCD_Type, 0, -1, out hv_AcqHandle);
            //HOperatorSet.SetFramegrabberParam(hv_AcqHandle, "saturation", 1038);
            //HOperatorSet.SetFramegrabberParam(hv_AcqHandle, "exposure", -4);
            HOperatorSet.GrabImageStart(hv_AcqHandle, -1);
            
            HOperatorSet.GrabImageAsync(out ho_Image_grab, hv_AcqHandle, -1);
            //Image Acquisition 01: Do something
            HOperatorSet.CloseFramegrabber(hv_AcqHandle);

            return ho_Image_grab;
            

        }

        public void RunHalcon()
        {
            //hv_ExpDefaultWinHandle = Window;
            action();
            
        }
        public void Stop_Acquisition()
        {
            m_Acquistion_Stop = true;
            
        }
        public void Set_Exposure(int exposure)
        {
            m_Exposure = (HTuple)exposure;
        }
        public void Get_Camera_Exposure(ref int expo)
        {
            HObject ho_Image;
            HTuple hv_AcqHandle = null, hv_Width = null;
            HTuple hv_Height = null, hv_ExposureRange = null, hv_CurrentExposure = new HTuple();
            HTuple hv_Exposure = new HTuple(), hv_ImageIndex = new HTuple();
            HOperatorSet.GenEmptyObj(out ho_Image);

            //open first camera device with current video settings:
            HOperatorSet.OpenFramegrabber("DirectShow", 1, 1, 0, 0, 0, 0, "default", 8, "rgb",
                -1, "false", "default", "[1] Point Grey Camera", 0, -1, out hv_AcqHandle);
            //
            //grab and display one image:
            ho_Image.Dispose();
            HOperatorSet.GrabImage(out ho_Image, hv_AcqHandle);
            HOperatorSet.GetImageSize(ho_Image, out hv_Width, out hv_Height);
            //dev_close_window(...);
            //dev_open_window(...);
            hv_ExpDefaultWinHandle = Window;
            HOperatorSet.DispObj(ho_Image, hv_ExpDefaultWinHandle);
            //
            //query the range of possible exposure values:
            /*
            HOperatorSet.GetFramegrabberParam(hv_AcqHandle, "exposure_range", out hv_ExposureRange);

            if ((int)(new HTuple((new HTuple(hv_ExposureRange.TupleLength())).TupleGreater(0))) != 0)
            {
                //remember the current exposure value
                HOperatorSet.GetFramegrabberParam(hv_AcqHandle, "exposure", out hv_CurrentExposure);
                //
                //loop over all possible exposure values and grab some images
                HTuple end_val25 = hv_ExposureRange.TupleSelect(
                    1);
                HTuple step_val25 = hv_ExposureRange.TupleSelect(2);
                for (hv_Exposure = hv_ExposureRange.TupleSelect(0); hv_Exposure.Continue(end_val25, step_val25); hv_Exposure = hv_Exposure.TupleAdd(step_val25))
                {
                    HOperatorSet.SetFramegrabberParam(hv_AcqHandle, "exposure", hv_Exposure);
                    for (hv_ImageIndex = 1; (int)hv_ImageIndex <= 15; hv_ImageIndex = (int)hv_ImageIndex + 1)
                    {
                        ho_Image.Dispose();
                        HOperatorSet.GrabImage(out ho_Image, hv_AcqHandle);
                        HOperatorSet.DispObj(ho_Image, hv_ExpDefaultWinHandle);
                    }
                }
                //
                //if automatic exposure adjustment is supported, i.e.
                if ((int)(new HTuple((new HTuple(hv_ExposureRange.TupleLength())).TupleEqual(
                    5))) != 0)
                {
                    HOperatorSet.SetFramegrabberParam(hv_AcqHandle, "exposure", hv_ExposureRange.TupleSelect(
                        4));
                    for (hv_ImageIndex = 1; (int)hv_ImageIndex <= 15; hv_ImageIndex = (int)hv_ImageIndex + 1)
                    {
                        ho_Image.Dispose();
                        HOperatorSet.GrabImage(out ho_Image, hv_AcqHandle);
                        HOperatorSet.DispObj(ho_Image, hv_ExpDefaultWinHandle);
                    }
                }
                //
                //restore the remembered exposure value
                HOperatorSet.SetFramegrabberParam(hv_AcqHandle, "exposure", hv_CurrentExposure);
            }*/
            //expo = hv_CurrentExposure.I;
            //
            HOperatorSet.GetFramegrabberParam(hv_AcqHandle, "exposure", out hv_CurrentExposure);
            expo = hv_CurrentExposure;
            HOperatorSet.CloseFramegrabber(hv_AcqHandle);
            ho_Image.Dispose();
        //param.Exposure = m_Exposure;
        }

    }
}

