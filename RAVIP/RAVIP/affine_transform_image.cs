//
//  File generated by HDevelop for HALCON/DOTNET (C#) Version 11.0
//
//  This file is intended to be used with the HDevelopTemplate or
//  HDevelopTemplateWPF projects located under %HALCONEXAMPLES%\c#

using System;
using HalconDotNet;

namespace TienDIP_Funciton_Using_Halcon
{

    public class Tien_Affine_Transform_Image
    {
        public HTuple hv_HalconWinHandle;
        HObject ho_ImageAffinTrans = null; //, ho_RegionAffineTrans=null;
        HObject ho_Image;
        HTuple hv_Scale = null;
        HTuple hv_CenterX;
        HTuple hv_CenterY;
        HTuple hv_Angle;
        //HObject transform_Image;

        public HTuple Hv_Angle
        {
            get { return hv_Angle; }
            set { hv_Angle = value; }
        }

        public HTuple Hv_CenterY
        {
            get { return hv_CenterY; }
            set { hv_CenterY = value; }
        }

        public HTuple Hv_CenterX
        {
            get { return hv_CenterX; }
            set { hv_CenterX = value; }
        }

        public HTuple Hv_Scale
        {
            get { return hv_Scale; }
            set { hv_Scale = value; }
        }

        // Main procedure 
        private void action()
        {

            // Local iconic variables 

           
            // Local control variables 

            HTuple hv_HomMat2DIdentity = null;
            HTuple  hv_HomMat2DRotate = new HTuple();
            HTuple hv_HomMat2DScale = new HTuple();
            
            // Initialize local and output iconic variables 
            HOperatorSet.GenEmptyObj(out ho_ImageAffinTrans);
            //HOperatorSet.SetColor(hv_HalconWinHandle, "red");
            
            //HTuple width = null, height = null;

            //HOperatorSet.GetImageSize(ho_Image, out width, out height);
            HOperatorSet.HomMat2dIdentity(out hv_HomMat2DIdentity);  // 產生 identity 矩陣
            
            //for (hv_Angle=0; (int)hv_Angle<=360; hv_Angle = (int)hv_Phi + 1)
            {
                HOperatorSet.HomMat2dRotate(hv_HomMat2DIdentity, hv_Angle.TupleRad(), hv_CenterX, hv_CenterY, out hv_HomMat2DRotate); // 產生旋轉矩陣
                HOperatorSet.HomMat2dScale(hv_HomMat2DRotate, hv_Scale, hv_Scale, hv_CenterX, hv_CenterY, out hv_HomMat2DScale); // 產生scale矩陣
                ho_ImageAffinTrans.Dispose();
                HOperatorSet.AffineTransImage(ho_Image, out ho_ImageAffinTrans, hv_HomMat2DScale, "nearest_neighbor", "false");  // 實際做轉換，且維持原影像大小
            }
            
        }

        public void InitHalcon()
        {
            // Default settings used in HDevelop 
            //HOperatorSet.SetSystem("width", 512);
            //HOperatorSet.SetSystem("height", 512);
        }

        public HObject RunHalcon(HObject Ho_Image, HTuple Window)  // return 旋轉後之影像
        {
            hv_HalconWinHandle = Window;
            ho_Image = Ho_Image;
            action();
            return ho_ImageAffinTrans;
        }
        public HObject RunHalcon(HObject Ho_Image)  // return 旋轉後之影像
        {
            //hv_HalconWinHandle = Window;
            ho_Image = Ho_Image;
            action();
            return ho_ImageAffinTrans;
        }
    }
}

